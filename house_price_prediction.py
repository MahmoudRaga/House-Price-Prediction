# -*- coding: utf-8 -*-
"""House Price Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dTkpGHDNlESFYeWZ5wBdBXtizXJcrYAd
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder,StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.decomposition import PCA
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import confusion_matrix,r2_score,silhouette_score,accuracy_score
plt.style.use ("dark_background")

data = pd.read_csv("housePrice.csv")
data

data.info()

des = data.describe()
des

sns.heatmap(des)

sns.pairplot(des)

corr = data.corr()
corr

sns.heatmap(corr)

sns.histplot(data=corr,kde=True,palette='hot')

nan = data.isna()
nan.sum()

sns.heatmap(nan)

plt.figure(figsize=(10,5))
sns.histplot(data=data['Price(USD)'],kde=True,palette='hot')

n_unique = data.nunique()
n_unique

for x in range(3478):
    print(type(data['Area']))

digit_list = []
not_digit_list = []
for i in data['Area']:
    if i.isdigit():
        i = int(i)
        digit_list.append(i)
        data['Area'] = pd.DataFrame(digit_list,columns = ['Area'])
    else:
        not_digit_list.append(i)

print(data['Area'])
type(data['Area'])

print(not_digit_list)
type(not_digit_list)

f = list(data['Area'])
type(f[570])
print(f)

for i in range (len(not_digit_list)):
    if not_digit_list[i] in f:
        print(f.index(not_digit_list[i]))

data.info()

data.isna().sum()

data = data.dropna()
data

data.info()

#data = data.drop([570,709,807,1604,2171,2802],axis = 0)

#d = list(data['Parking'].values)
#print(d)

#s = list(data['Parking'].values)
#s

#Parking_list = []
#for i in range(len(data['Parking'])):
#    if s[i] == True:
#        s[i] = 1
#    else:
#        s[i] = 0

#print(s)

#var = pd.DataFrame(s,columns = ['Parking'])
#var

#data = data.drop(['Parking'],axis = 1)
#data



LE = LabelEncoder()
data['Parking'] = LE.fit_transform(data['Parking'])
data['Warehouse'] = LE.fit_transform(data['Warehouse'])
data['Elevator'] = LE.fit_transform(data['Elevator'])
data['Address'] = LE.fit_transform(data['Address'])
data

data.info()

plt.figure(figsize=(10,5))
plt.bar(data['Area'],data['Price'],color='red')

head = data.head()
head

price = list(head['Price(USD)'])
Area = list(head['Area'])

plt.pie(price,labels=Area,labeldistance = 1.1,startangle = 90,colors = ['red','orange','green','purple','blue'],autopct = '%1.0f%%')

sns.heatmap(data)

data = np.array(data)

data

SC = StandardScaler()
data[:,0:1] = SC.fit_transform(data[:,0:1])
data[:,5:-1] = SC.fit_transform(data[:,5:-1])
data

data = pd.DataFrame(data,columns = ['Area','Room','Parking','Warehouse','Elevator','Address','Price','Price(USD)'])
data

x = data.iloc[:,:-1]
x

sns.heatmap(x)

x = np.array(x)
x

y = data.iloc[:,-1].values
y

x_train,x_test,y_train,y_test = train_test_split ( x , y , test_size = 0.2 , random_state = 0)

pca = PCA()
x = pca.fit_transform(x)

x

sns.heatmap(pd.DataFrame(x,columns = ['Area','Room','Parking','Warehouse','Elevator','Address','Price']))

LE = LinearRegression()
LE.fit(x_train,y_train)
y_pred = LE.predict(x_test)
print(y_pred)

print(r2_score(y_test,y_pred))

df_comp = pd.DataFrame({'Actual':y_test , 'Predict':y_pred})
df_comp

RFR = RandomForestRegressor()
RFR.fit(x_train,y_train)
y_pred = RFR.predict(x_test)
print(y_pred)

print(r2_score(y_test,y_pred))

import pickle
pickle.dump(RFR, open('House Price Prediction.pkl', 'wb'))

pickled_model = pickle.load(open('House Price Prediction.pkl', 'rb'))

pickled_model.predict(x_test)